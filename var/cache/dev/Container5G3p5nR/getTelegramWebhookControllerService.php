<?php

namespace Container5G3p5nR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getTelegramWebhookControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'App\Controller\TelegramWebhookController' shared autowired service.
     *
     * @return \App\Controller\TelegramWebhookController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'framework-bundle'.\DIRECTORY_SEPARATOR.'Controller'.\DIRECTORY_SEPARATOR.'AbstractController.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Controller'.\DIRECTORY_SEPARATOR.'TelegramWebhookController.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'UserService.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'WalletService.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'EncryptService.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'DepositWalletService.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Service'.\DIRECTORY_SEPARATOR.'AddressService.php';

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? $container->load('getDoctrine_Orm_DefaultEntityManagerService'));
        $b = ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService'));
        $c = ($container->privates['App\\Repository\\UserRepository'] ?? $container->load('getUserRepositoryService'));
        $d = new \App\Service\EncryptService($b);

        $e = new \App\Service\WalletService($a, $b, $d);

        $container->services['App\\Controller\\TelegramWebhookController'] = $instance = new \App\Controller\TelegramWebhookController($a, $b, ($container->services['translator'] ?? $container->load('getTranslatorService')), $c, ($container->privates['App\\Repository\\WalletRepository'] ?? $container->load('getWalletRepositoryService')), ($container->privates['App\\Repository\\TokenRepository'] ?? $container->load('getTokenRepositoryService')), ($container->privates['App\\Repository\\BufferRepository'] ?? $container->load('getBufferRepositoryService')), ($container->privates['App\\Repository\\PositionRepository'] ?? $container->load('getPositionRepositoryService')), ($container->privates['App\\Repository\\TradeRepository'] ?? $container->load('getTradeRepositoryService')), new \App\Service\UserService($c), $e, new \App\Service\DepositWalletService($a, $b, $e, ($container->privates['App\\Service\\Network\\SolanaService'] ?? $container->load('getSolanaServiceService')), ($container->privates['App\\Repository\\DepositWalletRepository'] ?? $container->load('getDepositWalletRepositoryService')), $d), ($container->privates['App\\Service\\TelegramService'] ?? $container->load('getTelegramServiceService')), ($container->privates['App\\Service\\TokenService'] ?? $container->load('getTokenServiceService')), ($container->privates['App\\Service\\TradingService'] ?? $container->load('getTradingServiceService')), new \App\Service\AddressService($b, $a, ($container->privates['App\\Repository\\AddressRepository'] ?? $container->load('getAddressRepositoryService'))), $d);

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
        ], [
            'http_kernel' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
        ]))->withContext('App\\Controller\\TelegramWebhookController', $container));

        return $instance;
    }
}
